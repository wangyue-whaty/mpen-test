#redis config
#project name,the project scope
#e.g. webtrn,sdkservice,webtrn-dubbo,whatysns
redis.projectName=whaty_ddb_center
#sentinels(For the management of the redis cluster),splits by ',' .
#e.g. 192.168.20.103:36379,192.168.20.104:36379,192.168.20.222:36379
redis.sentinels=192.168.148.46:36379,192.168.148.47:36379,192.168.148.48:36379 
#servers(redis masters,when redis.sentinels is empty or unavailable,redis.servers is required.),splits by ',' .
#e.g. 192.168.20.101:6379,192.168.20.103:26379 .
redis.servers=192.168.148.46:46379,192.168.148.47:46379,192.168.148.48:46379 

#every redis
#redis.db is required,for choosing the database.default 0
redis.db=26
#Enable/disabl
#Enable/disable redis.timeout with the specified timeout, in milliseconds.
#With this option set to a non-zero timeout,a read() call on the InputStream associated with this Socket will block for only this amount of time.
#e.g. 500 . default 500
redis.timeout=500
#the cap on the number of objects that can be allocated by the pool at a given time. Use negative is unlimit.
#e.g. 8,-1 . default 8
redis.maxTotal=10
#the cap on the number of "idle" instances in the pool.Use a negative value to indicate an unlimited number of idle instances.
#This is a result of the active threads momentarily returning objects faster than they are requesting them them, causing the number of idle objects to rise above maxIdle.
#e.g. 8.default 8
redis.maxIdle=8
#the minimum number of idle objects to maintain in the pool.This setting only has an effect if it is positive and is greater than zero.
#e.g. 4. default 4
redis.minIdle=2
#the number of milliseconds to sleep between runs of the idle object evictor thread.
#When non-positive, no idle object evictor thread will be run.
#e.g. 60000. default 60000
redis.timeBetweenEvictionRunsMillis=60000
#the minimum amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor
#When non-positive,no objects will be evicted from the pool due to idle time alone.
#e.g. 60000.default 60000
redis.minEvictableIdleTimeMillis=60000
#when the pool is exhausted,whether to block.
#1 should block to wait for a connection object.default 1
#0 throw throwing an exception(Could not get a resource from the pool) immediately.
redis.whenExhaustedAction=1
#when the pool is exhausted,it is the maximum amount of time (in milliseconds) to waiting for a connection object.
#When less than 0, it will block indefinitely.
#e.g. 500. default 500
redis.maxWait=500
#email 4 alarm message.split by ',',the project scope.
#e.g. huze@whaty.com
redis.emails=